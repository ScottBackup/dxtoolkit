---
 - hosts: all

   vars:
      dxloc: "/home/delphix/github"
      temp: "{{ dxversion | default('HEAD') }}"
      gittag: "{% if temp != 'HEAD' %} v{{ temp }} {% else %} {{ temp }}{% endif %}"

   tasks:

     - debug:
         msg: "{{ gittag }}"

     - debug:
         msg: "{{ temp }}"

     - name: Update all repositories
       become: yes
       become_user: root
       shell: |
          cd /etc/apt
          cp sources.list sources.list.orig
          cat sources.list | sed s/us\.archive\./old-releases\./ | sed s/security\./old-releases\./ > sources.list.new
          mv sources.list.new sources.list
          apt-get update

     - name: Install perls on ubuntu
       become: yes
       become_user: root
       apt:
          name: "{{ packages }}"
          update_cache: true
          state: present
       vars:
          packages:
             - "libpar-packer-perl"
             - "libjson-pp-perl"
             - "libdate-manip-perl"
             - "libdatetime-format-dateparse-perl"
             - "libcrypt-cbc-perl"
             - "libcrypt-blowfish-perl"
             - "libtext-csv-perl"
             - "libtry-tiny-perl"
             - "libparse-http-useragent-perl"
             - "libnet-ssleay-perl"
             - "libio-socket-ssl-perl"
             - "libfilter-perl"
             - "libterm-readkey-perl"
             - "cpanminus"
             - "make"
             - "gcc"
             - "libssl-dev"
             - "libwww-perl"

     - name: Install CPAN
       become: yes
       become_user: root
       cpanm: name={{ item }}
       ignore_errors: yes
       with_items:
          - "DateTime::Event::Cron::Quartz"
          - "Log::Syslog::Fast"
          - "Filter::Crypto::Decrypt"

     - name: dxtoolkit dirs
       become: yes
       become_user: root
       file: name={{ item }} state=directory owner=delphix
       with_items:
         - "{{ dxout }}"
         - "{{ dxloc }}"

     - name: github checkout
       git:
         repo: https://github.com/delphix/dxtoolkit.git
         dest: "{{ dxloc }}"
         clone: yes
         version: "{{ gittag }}"
         force: yes

     - name: no dx_syslog support
       when: no_dx_syslog == True
       file:
         state: absent
         path: "{{ dxloc }}/bin/dx_syslog.pl"

     - name: put password
       copy: src=dbutils.pm dest={{ dxloc }}/lib/dbutils.pm force=yes

     #- name: remove script
     #  file: name="{{ dxloc }}/bin/compile.sh"

     - name: create script
       template: src=compile_one.j2 dest="{{ dxloc }}/bin/compile.sh" mode=755 force=yes

     - name: compile
       shell: "bash -x {{dxloc}}/bin/compile.sh {{ temp }} > /tmp/compile.log"
       args:
        chdir: "{{ dxloc }}/bin/"
       register: output
       failed_when: "'ERROR' in output.stdout"

     - name: get toolkit
       fetch: src={{ dxtar }}/dxtoolkit2-{{ dxversion }}-{{ system }}.tar.gz dest=/mnt/c/Users/pioro/Documents/oss_delphix/dxtoolkit/tools/ flat=yes

     - name: cleanup temp
       shell: rm -rf /u02/tmp/par*

     - name: cleanup temp2
       shell: rm -rf /tmp/par*

     - name: cleanup file
       shell: rm -rf "{{ dxtar }}/dxtoolkit2-{{ dxversion }}-{{ system }}.tar.gz"
