#!/bin/bash

VER=$1

export PAR_VERBATIM=1
export TARLOC={{ dxtar }}
export DXLOC={{ dxout }}

PP={{ pploc }}

{% if ansible_os_family == "Solaris" %}
export SSLLIBS="-l /opt/csw/lib/libcrypto.so.1.0.0 -l /opt/csw/lib/libssl.so"
{% else %}
export SSLLIBS="-l /usr/lib64/libcrypto.so.10 -l /usr/lib64/libssl.so"
{% endif %}

rm -rf $DXLOC
mkdir $DXLOC

cd {{ dxloc }}/bin

{% if openssl is defined %}
$PP -u $SSLLIBS -I {{ dxloc }}/lib/ -M Text::CSV_PP -M List::MoreUtils::PP -M Crypt::Blowfish -F Crypto=dbutils\.pm$ -M Filter::Crypto::Decrypt -o $DXLOC/runner `ls dx_*.pl | xargs`
{% else %}
$PP -u -I {{ dxloc }}/lib/ -M Text::CSV_PP -M List::MoreUtils::PP -M Crypt::Blowfish  -F Crypto=dbutils\.pm$ -M Filter::Crypto::Decrypt -o $DXLOC/runner `ls dx_*.pl | xargs`
{% endif %}

cp *.example $DXLOC

if [[ "$VER" == "HEAD" ]]; then
 VER=`cat ../lib/Toolkit_helpers.pm | grep -e 'our $version' | perl -pe "s/.*(\d\.\d\.\d).*/\1/"`
fi

rm -rf /tmp/par-*

cd $DXLOC

ln -s $DXLOC/runner $DXLOC/dx_get_appliance

echo Checking version
RV=`$DXLOC/dx_get_appliance -version 2>&1`


if [ "$RV" != "$VER" ] ; then
	echo ERROR
	exit
fi

rm $DXLOC/dx_get_appliance
rm -rf /tmp/par-*
